/** @file       ApplauseControl.ino
 *  @brief      拍手制御
 *
 *  @par        ProductName
 *
 *  @author
 *  @version    0.1
 *  @date       2021/11/28
 *  @attention  特になし
 *  @par        Revision
 *  $Id$
 *  @par        Copyright
 *
 *  @par        History
 *              version 0.0.1    (2021/11/28) : Initial version
 *
 *  *  サンプルコード等を記述
 *  @code
 *  @endcode
 *
 */
/* Driver Includes ------------------------------------------------------------*/

/* Application Includes -------------------------------------------------------*/
#include <SoftwareSerial.h>
#include <MsTimer2.h>
#include "DFRobotDFPlayerMini.h"

/* Extern Variables -----------------------------------------------------------*/

/* Private Definitions --------------------------------------------------------*/
#define CONSOLE Serial
#define SKETCH_NAME "Applause Control"
#define VERSION "0.1"

#define _DEBUG_TEST_ false   ///< デバッグテスト

#define USE_WAKEUP_SOUND            true   ///< 起動音を鳴らす場合はtue ファイルNo=1、鳴らさない場合はfalse
#define CONSOLE_BAUDRATE            (9600)  ///< デバッグモニタ用のボーレート

#define USE_DFPLAYER_MINI           true   ///< DFRobotDFPlayerMini(DFR0299)を使用するかどうか

#define VOICE_MODULE_PIN_RX         11      ///< ボイスモジュール(DFR0299)のRXピン
#define VOICE_MODULE_PIN_TX         10      ///< ボイスモジュール(DFR0299)のTXピン
#define VOICE_MODULE_PIN_BUSY       A3      ///< ボイスモジュール(DFR0299)のBUSYピン
#define VOICE_MODULE_BAUDRATE       (9600)  ///< ボイスモジュール(DFR0299)のボーレート
#define VOICE_MODULE_SPEED_DEFAULT  (250)   ///< ボイスモジュールの再生速度(ディレイ時間)のデフォルト値(TODO:暫定)
#define VOICE_MODULE_SPEED_MIN      (220)   ///< ボイスモジュールの再生速度(ディレイ時間)の最小値(TODO:暫定)
#define VOICE_MODULE_SPEED_MAX      (50)    ///< ボイスモジュールの再生速度(ディレイ時間)の最大値(TODO:暫定)
#define VOICE_MODULE_VOLUME_DEFAULT (5)     ///< ボイスモジュールの音量のデフォルト値(TODO:暫定)
#define VOICE_MODULE_VOLUME_MIN     (10)     ///< ボイスモジュールの音量の最小値
#define VOICE_MODULE_VOLUME_MAX     (30)    ///< ボイスモジュールの音量の最大値

#define SOUNDS_SELECTED_MAX         (3)     ///< SW操作による最大音源数,音源切り替えのモード数は3

#define JOYSTICK_PIN_X              A1      ///< ジョイステックX軸ピン
#define JOYSTICK_PIN_Y              A0      ///< ジョイステックY軸ピン
#define JOYSTICK_PIN_SW             2       ///< ジョイステックセンタースイッチピン

#define MOTOR_PIN                   3       ///< モータ駆動ピン(TODO:暫定)
#define VIBRATION_TIME              500     ///< バイブレーションの駆動時間[ms]

#define LED_PIN1                    4       ///< LED1のピン(TODO:暫定)
#define LED_PIN2                    5       ///< LED2のピン(TODO:暫定)
#define LED_PIN3                    6       ///< LED3のピン(TODO:暫定)

#define JOYSTICK_CENTER_POS_X   (505.0f)    ///< X軸方向の中心位置の値(アナログ値[0～1024])(TODO:暫定)
#define JOYSTICK_CENTER_POS_Y   (528.0f)    ///< Y軸方向の中心位置の値(アナログ値[0～1024])(TODO:暫定)
#define JOYSTICK_POS_X_MIN      (0)         ///< X軸方向を-方向に倒したときの最小値(アナログ値[0～1024])(TODO:暫定)
#define JOYSTICK_POS_X_MAX      (1023)      ///< X軸方向を+方向に倒したときの最大値(アナログ値[0～1024])(TODO:暫定)
#define JOYSTICK_POS_Y_MIN      (0)         ///< Y軸方向を-方向に倒したときの最小値(アナログ値[0～1024])(TODO:暫定)
#define JOYSTICK_POS_Y_MAX      (1023)      ///< Y軸方向を+方向に倒したときの最大値(アナログ値[0～1024])(TODO:暫定)

#define JOYSTICK_RAPID_REACTION_THRESHOL    (400)   ///< ジョイスティックを急激に倒されたかどうかを判定する閾値(TODO:暫定)
                                                    ///< 前回との差分を取った操作量との比較(急激に倒せば操作量が大きくなる)

#define INTERVAL_MS             (100)   ///< インターバル時間[ms](TODO:暫定)
#define TIMER_2_INTERVAL_MS     (100)   ///< タイマー2のインターバル時間[ms]

#define INVALID_AREA_THRESHOLD  (0.05f) ///< ジョイスティックの無効領域の閾値(%で設定:デフォルトは5%とする)(TODO:暫定)
                                        ///< 中心から閾値以上変化があれば有効データとみなす。
const float THRESHOLD_X = JOYSTICK_CENTER_POS_X * INVALID_AREA_THRESHOLD;
const float THRESHOLD_Y = JOYSTICK_CENTER_POS_Y * INVALID_AREA_THRESHOLD;

const uint8_t LEDPins[SOUNDS_SELECTED_MAX] = {LED_PIN1, LED_PIN2, LED_PIN3};

/* Private Typedef ------------------------------------------------------------*/
/*
 * ジョイステックの構造体
 */
typedef struct
{
    bool    OnOff;      ///< 中心のボタンが押されたかどうか
    int16_t ValueX;     ///< X方向の読み取り値
    int16_t ValueY;     ///< Y方向の読み取り値
    bool    IsValidX;   ///< X軸方向の値が有効かどうか
    bool    IsValidY;   ///< Y軸方向の値が有効かどうか
} JoystickInfotypeDef;

/*
 * サウンドプレイヤーの構造体
 */
typedef struct
{
    uint8_t Mode;       ///< 再生モード(0=無効,1=拍手,2=大歓声)
    uint8_t Volume;     ///< 音量(0-30)
    uint16_t Speed;     ///< 再生速度
    bool IsStart;       ///< 再生開始
    bool IsStop;        ///< 再生停止
    bool IsBusy;        ///< Busy
    uint16_t BusyAnalog;///< Busyピンのアナログ値
    uint8_t SoundNumber;///< 再生ファイル番号
} PlayerInfotypeDef;

/*
 * モータの構造体
 */
typedef struct
{
    int16_t WaitTime;   ///< 動作時間[ms]最小単位は「TIMER_2_INTERVAL_MS」、0で停止
} MotorInfoTypeDef;

/* Private Macro --------------------------------------------------------------*/
/* Private Variables ----------------------------------------------------------*/
JoystickInfotypeDef JoystickInfo = {0};     ///< ジョイステックの情報
JoystickInfotypeDef JoystickInfoLast = {0}; ///< 前回のジョイステックの情報
PlayerInfotypeDef PlayerInfo = {0};         ///< サウンドプレイヤーの情報
MotorInfoTypeDef MotorInfo = {0};           ///< モータの情報
SoftwareSerial mySoftwareSerial(VOICE_MODULE_PIN_RX, VOICE_MODULE_PIN_TX);  ///< ボイスモジュールのUART
DFRobotDFPlayerMini myDFPlayer; ///< ボイスモジュールのAPI

/* Private Function Prototypes ------------------------------------------------*/

/* ------------------------------------------------------------------------------
  P R O G R A M  C O D E
 ------------------------------------------------------------------------------*/


//*******************************************************************************
/**
 * @brief       timer2 コールバック
 *
 * @param       無し
 * @return      無し
 */
//*******************************************************************************
void timer2Callback()
{
    unsigned long timeTick_ms = millis();
    int16_t diff_x = 0;
    int16_t diff_y = 0;

    // ジョイスティックのポジション取得
    JoystickInfo.ValueX = analogRead(JOYSTICK_PIN_X);
    JoystickInfo.ValueY = analogRead(JOYSTICK_PIN_Y);
    JoystickInfo.OnOff = digitalRead(JOYSTICK_PIN_SW);
    // Busyピンの判定
    PlayerInfo.BusyAnalog = analogRead(VOICE_MODULE_PIN_BUSY);
    PlayerInfo.IsBusy = (PlayerInfo.BusyAnalog < 70) ? true : false;     //音再生時450~455くらい

    // X軸:再生速度
    if( (JoystickInfo.ValueX > (JOYSTICK_CENTER_POS_X - THRESHOLD_X))
        && (JoystickInfo.ValueX < (JOYSTICK_CENTER_POS_X + THRESHOLD_X)) )
    {
        // 無効
        JoystickInfo.IsValidX = false;
    }
    else
    {
        // 有効
        JoystickInfo.IsValidX = true;
        if(PlayerInfo.Mode < 2) // 大歓声を検知していると停止する迄更新しない
        {
            PlayerInfo.Mode = 1;    // 拍手モード
        }

        // 変化量をチェックする(勢いよく倒したかどうか)
        // 操作量 = 今回値 ― 前回値
        diff_x = JoystickInfo.ValueX - JoystickInfoLast.ValueX;
        if(JoystickInfo.ValueX > JOYSTICK_CENTER_POS_X)
        {
            // ＋方向
            if(JOYSTICK_RAPID_REACTION_THRESHOL < diff_x)
            {
                // 急操作検知
                PlayerInfo.Mode = 2;    // 大歓声モード
            }
        }
        else
        {
            // ―方向
            if(-1 * JOYSTICK_RAPID_REACTION_THRESHOL > diff_x )
            {
                // 急操作検知
                PlayerInfo.Mode = 2;    // 大歓声モード
            }
        }
    }

    // Y軸:音量
    if( (JoystickInfo.ValueY > (JOYSTICK_CENTER_POS_Y - THRESHOLD_Y))
        && (JoystickInfo.ValueY < (JOYSTICK_CENTER_POS_Y + THRESHOLD_Y)) )
    {
        // 無効
        JoystickInfo.IsValidY = false;
    }
    else
    {
        // 有効
        JoystickInfo.IsValidY = true;
        if(PlayerInfo.Mode < 2) // 大歓声を検知していると停止する迄更新しない
        {
            PlayerInfo.Mode = 1;    // 拍手モード
        }

        // 変化量をチェックする(勢いよく倒したかどうか)
        // 操作量 = 今回値 ― 前回値
        diff_y = JoystickInfo.ValueY - JoystickInfoLast.ValueY;
        if(JoystickInfo.ValueY > JOYSTICK_CENTER_POS_Y)
        {
            // ＋方向
            if(JOYSTICK_RAPID_REACTION_THRESHOL < diff_y)
            {
                // 急操作検知
                PlayerInfo.Mode = 2;    // 大歓声モード
            }
        }
        else
        {
            // ―方向
            if(-1 * JOYSTICK_RAPID_REACTION_THRESHOL > diff_y )
            {
                // 急操作検知
                PlayerInfo.Mode = 2;    // 大歓声モード
            }
        }
    }

    // X軸の操作量を再生速度(ディレイ時間)の値に変換
    if(JoystickInfo.IsValidX)
    {
        // 操作量を再生速度に変換
        PlayerInfo.Speed = convertToSpeed(JoystickInfo.ValueX);
    }
    else
    {
        // デフォルト
        PlayerInfo.Speed = VOICE_MODULE_SPEED_DEFAULT;
    }

    // Y軸の操作量を音量(0 to 30)の値に変換
    if(JoystickInfo.IsValidY)
    {
        // 操作量を音量に変換
        PlayerInfo.Volume = convertToVolume(JoystickInfo.ValueY);
    }
    else
    {
        // デフォルト
        PlayerInfo.Volume = VOICE_MODULE_VOLUME_DEFAULT;
    }

    // SWの状態変化(アクティブHighの場合) TODO:SWを押したときの論理に合わせて変更する
    if ((JoystickInfo.OnOff == LOW) && (JoystickInfo.OnOff != JoystickInfoLast.OnOff))
    {
        // 音源切替
        PlayerInfo.SoundNumber++;
        if (PlayerInfo.SoundNumber > SOUNDS_SELECTED_MAX)
        {
            PlayerInfo.SoundNumber = 1;
        }
        // LED
        ModeLed(PlayerInfo.SoundNumber);

        CONSOLE.print(F("SoundNumber:"));
        CONSOLE.println(PlayerInfo.SoundNumber);
    }

// 再生判定
    if( JoystickInfo.IsValidX == false && JoystickInfo.IsValidY == false)
    {
        // 停止
        if(PlayerInfo.IsBusy == false)    // 再生が終わるのを待つ
        {
            // myDFPlayer.stop();
            PlayerInfo.IsStart = false;
            PlayerInfo.Mode = 0;
        }
    }
    else
    {
        // 再生
        if(PlayerInfo.IsBusy == false)    // 再生が終わっていれば再生
        {
            PlayerInfo.IsStart = true;
        }
        // playTask1(),playTask2()で実行しているので不要
        // else
        // {
        //     // 再生中の音量変更
        //     myDFPlayer.volume(PlayerInfo.Volume);   // ボリューム設定 0 to 30
        // }
    }

    // バイブレーション
    if(MotorInfo.WaitTime > 0)
    {
        // ON
        digitalWrite(MOTOR_PIN, HIGH);  //  TODO:ON/OFFの論理に合わせて変更する
        MotorInfo.WaitTime -= TIMER_2_INTERVAL_MS;  // カウントダウン
        CONSOLE.print(F("Motor ON:"));
        CONSOLE.println(MotorInfo.WaitTime);
    }
    else
    {
        // OFF
        digitalWrite(MOTOR_PIN, LOW);   //  TODO:ON/OFFの論理に合わせて変更する
    }


    CONSOLE.print("[");         CONSOLE.print(timeTick_ms); CONSOLE.print("]\t");
    CONSOLE.print("Joystick\t");
    CONSOLE.print(",X:");        CONSOLE.print(JoystickInfo.ValueX);
    CONSOLE.print(",X Last:");   CONSOLE.print(JoystickInfoLast.ValueX);
    CONSOLE.print(",Y:");        CONSOLE.print(JoystickInfo.ValueY);
    CONSOLE.print(",Y Last:");   CONSOLE.print(JoystickInfoLast.ValueY);
    CONSOLE.print(",IsValidX:"); CONSOLE.print(JoystickInfo.IsValidX);
    CONSOLE.print(",IsValidY:"); CONSOLE.print(JoystickInfo.IsValidY);
    CONSOLE.print(",SW:");       CONSOLE.print(JoystickInfo.OnOff);
    CONSOLE.print(",SW Last:");  CONSOLE.print(JoystickInfoLast.OnOff);
    CONSOLE.print(",Diff X:");   CONSOLE.print(diff_x);
    CONSOLE.print(",Diff Y:");   CONSOLE.print(diff_y);
    CONSOLE.print("\t");
    CONSOLE.print("Sound Play\t");
    CONSOLE.print(",Mode:");     CONSOLE.print(PlayerInfo.Mode);
    CONSOLE.print(",Speed:");    CONSOLE.print(PlayerInfo.Speed);
    CONSOLE.print(",Volume:");   CONSOLE.print(PlayerInfo.Volume);
    CONSOLE.print(",IsStart:");  CONSOLE.print(PlayerInfo.IsStart);
    CONSOLE.print(",IsStop:");   CONSOLE.print(PlayerInfo.IsStop);
    CONSOLE.print(",IsBusy:");   CONSOLE.print(PlayerInfo.IsBusy);
    CONSOLE.print(",BusyAnalog:"); CONSOLE.print(PlayerInfo.BusyAnalog);
    CONSOLE.println("");

    // 最後の値を保持
    JoystickInfoLast = JoystickInfo;

}

//*******************************************************************************
/**
 * @brief       初期化
 *
 * @param       無し
 * @return      無し
 */
//*******************************************************************************
void setup()
{
    delay(1000);

    CONSOLE.begin(CONSOLE_BAUDRATE);
    CONSOLE.println();
    CONSOLE.print(F("Welcome to ")); CONSOLE.print(SKETCH_NAME); CONSOLE.print(F(" ")); CONSOLE.println(VERSION);

    // ジョイステックの設定
    pinMode(JOYSTICK_PIN_X, INPUT);
    pinMode(JOYSTICK_PIN_Y, INPUT);
    pinMode(JOYSTICK_PIN_SW, INPUT_PULLUP); // アクティブLow

    // LEDの設定
    pinMode(LED_PIN1, OUTPUT);
    pinMode(LED_PIN2, OUTPUT);
    pinMode(LED_PIN3, OUTPUT);
    // 全てOFF
    for(int i = 0; i < SOUNDS_SELECTED_MAX; i++)
    {
        digitalWrite(LEDPins[i], LOW);
    }
    //スタート時のモード1点灯
    digitalWrite(LED_PIN1, HIGH);

    // モータの設定
    pinMode(MOTOR_PIN, OUTPUT);

    // uint8_t volume = 0;
    // CONSOLE.println(F("[Volume Test]"));

    // int16_t testDataVolume[] = {JOYSTICK_POS_Y_MIN, JOYSTICK_POS_Y_MAX, JOYSTICK_CENTER_POS_Y, 100, 200, 300, 400, 500, 600};
    // int count = sizeof(testDataVolume) / sizeof(int16_t);
    // for(int i = 0; i < count; i++)
    // {
    //     JoystickInfo.ValueY = testDataVolume[i];
    //     PlayerInfo.Volume = convertToVolume(JoystickInfo.ValueY);
    //     CONSOLE.print(F("ValueY:"));
    //     CONSOLE.print(JoystickInfo.ValueY);
    //     CONSOLE.print(F(",Volume:"));
    //     CONSOLE.println(PlayerInfo.Volume);
    // }
    // CONSOLE.println("");

    // CONSOLE.println(F("[Speed Test]"));
    // int16_t testDataSpeed[] = {JOYSTICK_POS_X_MIN, JOYSTICK_POS_X_MAX, JOYSTICK_CENTER_POS_X, 100, 200, 300, 400, 500, 600};
    // count = sizeof(testDataSpeed) / sizeof(int16_t);
    // for(int i = 0; i < count; i++)
    // {
    //     JoystickInfo.ValueX = testDataSpeed[i];
    //     PlayerInfo.Speed = convertToSpeed(JoystickInfo.ValueX);
    //     CONSOLE.print(F("ValueX:"));
    //     CONSOLE.print(JoystickInfo.ValueX);
    //     CONSOLE.print(F(",Speed:"));
    //     CONSOLE.println(PlayerInfo.Speed);
    // }
    // CONSOLE.println("");

    // プレーヤーの設定
#if USE_DFPLAYER_MINI
    // BUSYピン
    pinMode(VOICE_MODULE_PIN_BUSY, INPUT);
    PlayerInfo.SoundNumber = 1;

    mySoftwareSerial.begin(VOICE_MODULE_BAUDRATE);
    if (!myDFPlayer.begin(mySoftwareSerial))    //Use softwareSerial to communicate with mp3.
    {
        CONSOLE.println(F("Unable to begin:"));
        CONSOLE.println(F("1.Please recheck the connection!"));
        CONSOLE.println(F("2.Please insert the SD card!"));
        while(true);
    }
    CONSOLE.println(F("DFPlayer Mini online."));

    myDFPlayer.setTimeOut(500); //Set serial communictaion time out 500ms

    // 起動音を鳴らす(必要あれば)
#ifdef USE_WAKEUP_SOUND
    myDFPlayer.volume(25);   // ボリューム設定 0 to 30
    myDFPlayer.play(1);     // 起動音現No1(TODO:仮)
    CONSOLE.println("WakeUp Sound:play=1, volum=25");
    delay(3000);
#endif
#endif  // USE_DFPLAYER_MINI

    // タイマーの設定
    MsTimer2::set(TIMER_2_INTERVAL_MS, timer2Callback);
    MsTimer2::start();  // タイマー開始

    CONSOLE.println("Initializing... Done");
}

//*******************************************************************************
/**
 * @brief       メインループ処理
 *
 * @param       無し
 * @return      無し
 */
//*******************************************************************************
void loop()
{
    unsigned long timeTick_ms = millis();

    // 再生されていなければ再生
    if(PlayerInfo.IsStart && (PlayerInfo.IsBusy == false))
    {
        switch(PlayerInfo.Mode)
        {
            case 1: // 拍手
                CONSOLE.print("[");         CONSOLE.print(timeTick_ms); CONSOLE.print("]\t");
                CONSOLE.println("playTask1:Start");

                playTask1();

                CONSOLE.print("[");         CONSOLE.print(timeTick_ms); CONSOLE.print("]\t");
                CONSOLE.println("playTask1:Stop");
                break;

            case 2: // 大歓声
                CONSOLE.print("[");         CONSOLE.print(timeTick_ms); CONSOLE.print("]\t");
                CONSOLE.println("playTask2:Start");

                playTask2();

                CONSOLE.print("[");         CONSOLE.print(timeTick_ms); CONSOLE.print("]\t");
                CONSOLE.println("playTask2:Stop");
                break;

            default:
                break;
        }
    }

    if (myDFPlayer.available())
    {
        printDetail(myDFPlayer.readType(), myDFPlayer.read()); //Print the detail message from DFPlayer to handle different errors and states.
    }

    // 最後の値を保持
    // JoystickInfoLast = JoystickInfo;

    // インターバル
    delay(INTERVAL_MS);
}

//*******************************************************************************
/**
 * @brief       操作量 -> 再生速度処理
 *
 * @param       int16_t value
 * @return      再生速度(ディレイ時間)
 */
//*******************************************************************************
uint16_t convertToSpeed(int16_t value)
{
    long min = 0;
    long max = 0;
    long result = 0;

    if (JOYSTICK_CENTER_POS_X < value)
    {
        min = (JOYSTICK_CENTER_POS_X + THRESHOLD_X);
        max = JOYSTICK_POS_X_MAX;
    }
    else
    {
        min = (JOYSTICK_CENTER_POS_X + THRESHOLD_X);
        max = JOYSTICK_POS_X_MIN;
    }
    // スケール変換
    result = map(value, min, max, VOICE_MODULE_SPEED_MIN, VOICE_MODULE_SPEED_MAX);

    // 最大/最小 ガード
    if (result < VOICE_MODULE_SPEED_MAX)
    {
        result = VOICE_MODULE_SPEED_MAX;
    }
    if (result > VOICE_MODULE_SPEED_MIN)
    {
        result = VOICE_MODULE_SPEED_MIN;
    }

    return (uint16_t)result;
}

//*******************************************************************************
/**
 * @brief       操作量 -> 音量変換処理
 *
 * @param       int16_t value
 * @return      音量(0-30)
 */
//*******************************************************************************
uint8_t convertToVolume(int16_t value)
{
    long min = 0;
    long max = 0;
    long result = 0;

    if (JOYSTICK_CENTER_POS_Y < value)
    {
        min = (JOYSTICK_CENTER_POS_Y + THRESHOLD_Y);
        max = JOYSTICK_POS_Y_MAX;
    }
    else
    {
        min = (JOYSTICK_CENTER_POS_Y + THRESHOLD_Y);
        max = JOYSTICK_POS_Y_MIN;
    }
    // スケール変換
    result = map(value, min, max, VOICE_MODULE_VOLUME_MIN, VOICE_MODULE_VOLUME_MAX);

    // 最大/最小 ガード
    if (result > VOICE_MODULE_VOLUME_MAX)
    {
        result = VOICE_MODULE_VOLUME_MAX;
    }
    if (result < VOICE_MODULE_VOLUME_MIN)
    {
        result = VOICE_MODULE_VOLUME_MIN;
    }

    return (uint8_t)result;
}

//*******************************************************************************
/**
 * @brief       音源モードに合わせてLEDを切替
 *
 * @param       uint8_t soundNumber 音源番号(1～3)
 * @return      無し
 */
//*******************************************************************************
void ModeLed(uint8_t soundNumber)
{
    if(soundNumber > SOUNDS_SELECTED_MAX)
    {
        return;
    }

    // 一旦すべてOFF
    for(int i = 0; i < SOUNDS_SELECTED_MAX; i++)
    {
        digitalWrite(LEDPins[i], LOW);
    }
    // LED ON(アクティブ HIGH)
    digitalWrite(LEDPins[soundNumber - 1], HIGH);
}

//*******************************************************************************
/**
 * @brief       ディレイしながら再生停止を判定する
 *
 * @param       無し
 * @return      無し
 */
//*******************************************************************************
bool delayForSoundStop(unsigned long ms)
{
    unsigned long count = ms / VOICE_MODULE_SPEED_MAX;
    unsigned long remainder = ms % VOICE_MODULE_SPEED_MAX;

    for(unsigned long i = 0; i < count; i++)
    {
        delay(VOICE_MODULE_SPEED_MAX);  // 再生速度の最大値(最速値)でディレイする

        if( JoystickInfo.IsValidX == false && JoystickInfo.IsValidY == false)
        {
            CONSOLE.println(F("SoundStop"));
            // 停止
            return true;
        }
    }
    delay(remainder);   // 余りをディレイ

    return false;
}

//*******************************************************************************
/**
 * @brief       再生タスク処理1(拍手)
 *
 * @param       無し
 * @return      無し
 */
//*******************************************************************************
void playTask1(void)
{
    const int TRACK_NUM = 5;    ///< 音源モードに対するトラック数 TODO
    int tracksNo[SOUNDS_SELECTED_MAX][TRACK_NUM] = {    // 各音源モードの拍手の再生トラックNoの定義
        {1, 2, 3, 4, 5},        ///< 拍手音源モード1の拍手
        {6, 7, 8, 9, 10},       ///< 拍手音源モード2の拍手
        {11, 12, 13, 14, 15} }; ///< 拍手音源モード3の拍手
#if USE_DFPLAYER_MINI

    // TODO:ここに拍手を実現するための処理を実装する
    myDFPlayer.volume(PlayerInfo.Volume);   // ボリューム設定 0 to 30
#if _DEBUG_TEST_
    // デバッグテスト
    myDFPlayer.play(2);                     // TODO:拍手音声
    delay(PlayerInfo.Speed);
#else
    for(int i = 0; i < 5; i++)              // TODO:繰り返し回数は調整ください
    {
        for(int j = 0; j < TRACK_NUM; j++)
        {
            CONSOLE.print(F("tracksNo:"));
            CONSOLE.println(tracksNo[PlayerInfo.SoundNumber - 1][j]);
            CONSOLE.print(F("Volume:"));
            CONSOLE.println(PlayerInfo.Volume);
            myDFPlayer.volume(PlayerInfo.Volume);   // ボリューム設定 0 to 30
            myDFPlayer.play(tracksNo[PlayerInfo.SoundNumber - 1][j]);    // TODO:拍手音声
            // ディレイしながら再生停止を判定する
            if ( delayForSoundStop(PlayerInfo.Speed) == true )
            {
                // 再生停止
                myDFPlayer.stop();
                return;
            }
        }
    }
#endif

#endif  // USE_DFPLAYER_MINI
}

//*******************************************************************************
/**
 * @brief       再生タスク処理2(大歓声)
 *
 * @param       無し
 * @return      無し
 */
//*******************************************************************************
void playTask2(void)
{
    int tracksNo[SOUNDS_SELECTED_MAX] = {20, 21, 22};   // 各音源モードの歓声の再生トラックNoの定義

#if USE_DFPLAYER_MINI
    // TODO:ここに大歓声を実現するための処理を実装する
    myDFPlayer.volume(PlayerInfo.Volume);   // ボリューム設定 0 to 30
#if _DEBUG_TEST_
    // デバッグテスト
    myDFPlayer.play(10);                    // TODO:歓声音声
    MotorInfo.WaitTime = VIBRATION_TIME;    // バイブレーション
#else
    myDFPlayer.play(tracksNo[PlayerInfo.SoundNumber -1]);   // TODO:歓声音声
    Serial.print("歓声trackNo");
    Serial.print(tracksNo[PlayerInfo.SoundNumber -1]);
    MotorInfo.WaitTime = VIBRATION_TIME;    // バイブレーション

    playTask1();    // 拍手再生
#endif

#endif  // USE_DFPLAYER_MINI
}

void printDetail(uint8_t type, int value)
{
    switch (type)
    {
        case TimeOut:
            Serial.println(F("Time Out!"));
            break;
        case WrongStack:
            Serial.println(F("Stack Wrong!"));
            break;
        case DFPlayerCardInserted:
            Serial.println(F("Card Inserted!"));
            break;
        case DFPlayerCardRemoved:
            Serial.println(F("Card Removed!"));
            break;
        case DFPlayerCardOnline:
            Serial.println(F("Card Online!"));
            break;
        case DFPlayerPlayFinished:
            Serial.print(F("Number:"));
            Serial.print(value);
            Serial.println(F(" Play Finished!"));
            break;
        case DFPlayerError:
            Serial.print(F("DFPlayerError:"));
            switch (value)
            {
                case Busy:
                    Serial.println(F("Card not found"));
                    break;
                case Sleeping:
                    Serial.println(F("Sleeping"));
                    break;
                case SerialWrongStack:
                    Serial.println(F("Get Wrong Stack"));
                    break;
                case CheckSumNotMatch:
                    Serial.println(F("Check Sum Not Match"));
                    break;
                case FileIndexOut:
                    Serial.println(F("File Index Out of Bound"));
                    break;
                case FileMismatch:
                    Serial.println(F("Cannot Find File"));
                    break;
                case Advertise:
                    Serial.println(F("In Advertise"));
                    break;
                default:
                    break;
            }
            break;
        default:
            break;
    }
}